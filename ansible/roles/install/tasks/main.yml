- name: set hostname
  command: hostnamectl set-hostname "{{ server_hostname }}"
  when: "ansible_hostname != server_hostname"

- name: Update hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: present
    search_string: '127.0.1.1'
    line: 127.0.1.1 {{ server_hostname }}
    owner: root
    group: root
    mode: '0644'

- name: create ansible user
  user:
    name: ansible
    groups: root
    state: present
    uid: 1002

- name: add ssh key for ansible
  authorized_key:
    user: ansible
    key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINSi+y9JJj14bgwxhiRmO6CZVx2Hxl5TK+yYXLlP8DqW ansible"
    state: present

- name: add ssh key for desktop
  authorized_key:
    user: drussell
    key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIELunLk3qc87GLt/P8gYfc9H0EtO9JFY11Xhyj8SUlnP dalton.w.russell@gmail.com"
    state: present

- name: add sudoers file for ansible
  copy: 
    src: ./files/sudoer_ansible
    dest: /etc/sudoers.d/ansible
    owner: root
    group: root
    mode: 0440

- name: update apt repos
  apt:
    update_cache: yes
  changed_when: false

- name: install base packages
  apt:
    name: "{{ base_packages }}"

- name: install host specific packages
  apt:
    name: "{{ additional_packages }}"
  when: additional_packages is defined

- name: create share group
  ansible.builtin.group:
    name: share_group
    state: present
    gid: 3000

- name: add drussell to share group
  ansible.builtin.user:
    name: drussell
    append: true
    groups: share_group

- name: create docker user
  user:
    name: docker
    groups: share_group
    append: true
    state: present
    uid: 1001
  when: "'docker' in group_names"

- name: ensure /share directory exists 
  ansible.builtin.file:
    path: /share
    state: directory
    owner: drussell
    group: share_group
    mode: '0777'
    
- name: add nfs to fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    state: present
    regexp: '^192.168.50.201'
    line: '192.168.50.201:/mnt/NAS1/networkshare /share nfs rw,noac,nfsvers=4 0 0'
    owner: root
    group: root
    mode: '0644'

- name: mount nfs
  command: mount -a

- name: check if system reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot_required

    # Send Discord message when reboot is required
- name: Send Discord message
  uri:
    url: "{{ discord_webhook_url }}"
    method: POST
    body_format: json
    body: '{"content": "Reboot required on {{ inventory_hostname }}"}'
    headers:
      Content-Type: application/json
    status_code: 204
  when: reboot_required.stat.exists